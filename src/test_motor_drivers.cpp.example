// test_motor_drivers.cpp.example - Example showing improved motor driver architecture
// This demonstrates how the new design eliminates the PWM-to-CAN kludge

#include "MotorDriverInterface.h"
#include "MotorDriverFactory.h"
#include "CANManager.h"
#include "HardwareManager.h"

// Example of the OLD kludge approach (V6-NG style):
/*
void SteerKeya(int steerSpeed) {
    // This is the KLUDGE - taking PWM value and converting to CAN
    // Problems:
    // 1. Mixing abstraction levels (PWM vs CAN protocol)
    // 2. No proper error handling
    // 3. No status feedback
    // 4. Hardcoded protocol details mixed with application logic
    
    uint8_t cmd = 0;
    uint16_t pwmValue = 0;
    
    if (steerSpeed > 0) {
        cmd = 0x01;  // Forward
        pwmValue = map(steerSpeed, 0, 255, 0, 1000);
    } else if (steerSpeed < 0) {
        cmd = 0x02;  // Reverse  
        pwmValue = map(abs(steerSpeed), 0, 255, 0, 1000);
    }
    
    // Send CAN message...
    // This shouldn't be here! Motor protocol details should be encapsulated
}

// Then in autosteer code:
if (motorType == KEYA) {
    SteerKeya(pwmValue);  // KLUDGE!
} else {
    analogWrite(pwmPin, pwmValue);  // Normal PWM
}
*/

// NEW approach with proper abstraction:
void demonstrateNewApproach() {
    // Initialize managers
    CANManager* canMgr = new CANManager();
    HardwareManager* hwMgr = new HardwareManager();
    
    canMgr->initializeCAN();
    hwMgr->initializeHardware();
    
    // Auto-detect or configure motor type
    MotorDriverType motorType = MotorDriverFactory::detectMotorType(canMgr);
    
    // Create appropriate driver - NO KLUDGE!
    MotorDriverInterface* motor = MotorDriverFactory::createMotorDriver(
        motorType, hwMgr, canMgr
    );
    
    if (!motor || !motor->init()) {
        Serial.print("\r\nFailed to initialize motor driver!");
        return;
    }
    
    // Now autosteer code is CLEAN and motor-agnostic:
    motor->enable(true);
    
    // Set speed - same interface for ALL motor types!
    float steerCommand = 50.0f;  // 50% forward
    motor->setSpeed(steerCommand);
    
    // The driver handles all protocol details internally
    // - PWM drivers: Sets PWM duty cycle and direction pins
    // - CAN drivers: Sends proper CAN messages
    // - Future drivers: Just implement the interface
    
    // Get status - works for all motor types
    MotorStatus status = motor->getStatus();
    Serial.printf("\r\nMotor: %s, Speed: %.1f%%, Enabled: %s",
                  motor->getTypeName(),
                  status.actualSpeed,
                  status.enabled ? "YES" : "NO");
    
    // Process loop - some drivers need regular updates
    motor->process();
    
    // Clean shutdown
    motor->stop();
    motor->enable(false);
}

// Benefits of the new approach:
// 1. Clean separation of concerns
// 2. Easy to add new motor types
// 3. Consistent interface for all motors
// 4. Proper error handling and status reporting
// 5. No mixing of PWM and CAN concepts
// 6. Testable and maintainable
// 7. Future-proof for new protocols